plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    runs {
        data {
            inherit client
            setConfigName("Fabric Data")
            ideConfigGenerated(true)

            vmArg("-Dfabric-api.datagen")
            vmArg("-Dfabric-api.datagen.output-dir=${project(":common").file("src/main/generated/resources")}")
            vmArg("-Dfabric-api.datagen.modid=betterarcheology")

            runDir "build/datagen"

        }
    }
}

sourceSets {
    main {
        resources {
            srcDir("src/main/generated/resources")
            srcDir(project(":common").file("src/main/generated/resources"))
            exclude("**/.cache")
        }
    }
}

repositories {
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        url "https://www.cursemaven.com"
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        name = "Ladysnake Libs"
        url = 'https://maven.ladysnake.org/releases'
    }
    maven {
        // location of the maven that hosts JEI files before January 2023
        name = "Progwml6's maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')

    // Cardinal Components needed in 1.20.4 for trinkets to run in dev env
    modApi include("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${cca_version}")
    modApi include("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${cca_version}")
    modImplementation "dev.emi:trinkets:${trinkets_version}"

    //CONFIG
    modImplementation "com.teamresourceful.resourcefulconfig:resourcefulconfig-fabric-1.21:$rootProject.resourceful_config_version"

    modImplementation("mezz.jei:jei-${project.minecraft_version}-fabric:${jei_version}") {
        exclude group: "mezz.jei"
    }
}

processResources {
    var replaceProperties = [
            version: project.version, displayName: display_name, authors: authors, modDescription: mod_description
    ]
    inputs.properties replaceProperties

    filesMatching('fabric.mod.json') {
        expand replaceProperties
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
