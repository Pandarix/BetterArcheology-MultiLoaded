plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}
loom {
    accessWidenerPath = project(":common").file("src/main/resources/betterarcheology.accessWidener")
}
repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
    maven {
        url "https://www.cursemaven.com"
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        name = "OctoStudios"
        url = uri("https://maven.octo-studios.com/releases")
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-neoforge:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')

    implementation "top.theillusivec4.curios:curios-neoforge:${curios_version}+${minecraft_version}"
    implementation "curse.maven:elytra-slot-317716:5778461"
    runtimeOnly "com.illusivesoulworks.caelus:caelus-neoforge:${caelus_version}+${minecraft_version}"
    compileOnly "com.illusivesoulworks.caelus:caelus-neoforge:${caelus_version}+${minecraft_version}:api"

    // Config library
    modImplementation "com.teamresourceful.resourcefulconfig:resourcefulconfig-neoforge-1.21:$rootProject.resourceful_config_version"

    // compile against the JEI API but do not include it at runtime
    compileOnly("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly("mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}")
    // at runtime, use the full JEI jar for Forge
    runtimeOnly("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}")

    // Hack fix for now, force jopt-simple to be exactly 5.0.4 because Mojang ships that version, but some transitive dependencies request 6.0+
    implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }
}

sourceSets {
    main {
        resources {
            srcDir("src/main/generated/resources")
            srcDir(project(":common").file("src/main/generated/resources"))
            exclude("**/.cache")
        }
    }
}

processResources {
    var replaceProperties = [
            version    : project.version,
            displayName: display_name, authors: authors, modDescription: mod_description
    ]

    inputs.properties replaceProperties
    filesMatching('META-INF/neoforge.mods.toml') {
        expand replaceProperties
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    atAccessWideners.add(loom.accessWidenerPath.get().asFile.name)
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}
